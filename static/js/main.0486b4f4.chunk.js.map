{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","todo","setTodo","todos","setTodos","openUpdateTodo","setOpenUpdateTodo","textUpdate","setTextUpdate","input","setInput","selectionModel","setSelectionModel","useStyles","makeStyles","table","marginLeft","marginRight","typography","paddingTop","textAlign","rows","handleOnclick","e","preventDefault","name","alert","newTodo","id","Math","floor","random","completed","previous","console","log","updateSomething","update","map","todo1","columns","field","headerName","width","flex","renderCell","cellValues","Button","variant","color","onClick","filter","row","classes","style","height","CssBaseline","AppBar","position","Toolbar","Typography","align","className","length","display","justifyContent","padding","onSubmit","TextField","type","onChange","target","value","placeholder","l","label","size","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","onSelectionModelChange","newSelectionModel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0486b4f4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport { Typography, AppBar, CssBaseline, Toolbar, TextField } from '@mui/material';\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { makeStyles } from '@material-ui/core';\n\nconst App = () => {\n  const [todo, setTodo] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [openUpdateTodo, setOpenUpdateTodo] = useState(false);\n  const [textUpdate, setTextUpdate] = useState();\n  const [input, setInput] = useState('');\n  const [selectionModel, setSelectionModel] = useState([])\n\n  const useStyles = makeStyles({\n    table: {\n      marginLeft: \"45vh\",\n      marginRight: \"45vh\"\n    },\n    typography: {\n      paddingTop: '10px',\n      textAlign: 'center'\n    }\n  })\n\n  const rows = todos;\n\n  const handleOnchange = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const handleOnchangeUpdate = (e) => {\n    setInput(e.target.value);\n  }\n\n  const handleOnclick = (e) => {\n    e.preventDefault();\n    if (todo.name === '') {\n      alert('you have to add something ....!');\n      return false\n    } else {\n      const newTodo = {\n        id: Math.floor(Math.random() * 1000),\n        todo: todo,\n        completed: false\n      }\n      setTodos((previous) => ([...previous, newTodo]))\n      console.log(todos);\n      setTodo('');\n    }\n  };\n\n  // const checkBox = (id) => {\n  //   const toggleCheckbox = todos.map((todo) => {\n  //     if (todo.id === id) {\n  //       todo.completed = !todo.completed\n  //     };\n  //     if (todo.id === id, todo.completed === true) {\n  //       document.getElementById(todo.id).style.textDecoration = 'line-through';\n  //     } else {\n  //       document.getElementById(todo.id).style.textDecoration = 'none';\n  //     };\n  //     return todo;\n  //   });\n  //   setTodos(toggleCheckbox);\n  // };\n\n  const updateSomething = (e) => {\n    e.preventDefault();\n    const update = todos.map((todo1) => {\n      if (todo1.id === textUpdate.id) {\n        textUpdate.todo = input;\n      }\n      return todo1;\n    })\n    setTodos(update);\n    setOpenUpdateTodo(false);\n    setTodo('');\n    setTextUpdate(null);\n  }\n\n  const columns = [\n    { field: 'id', headerName: 'ID', width: 70, flex:0.5 },\n    { field: 'todo', headerName: 'To Do', width: 300, flex: 2 },\n    {\n      field: \"Action\",\n      width: 200,\n      renderCell: (cellValues) => {\n        // console.log(\"hi\", cellValues.row.todo);\n        const handleDelete = () => {\n          const filter = todos.filter((todo) => (todo.id !== cellValues.id));\n          setTodos(filter);\n        };\n\n        const handleEdit = () => {\n          setOpenUpdateTodo(true);\n          setTextUpdate(cellValues.row)\n          setInput(cellValues.row.todo);\n        }\n        return (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleDelete}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleEdit}\n            >\n              Edit\n            </Button>\n          </>\n        );\n      }, flex: 1\n    }\n  ];\n\n  const classes = useStyles();\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <BorderColorIcon color=\"error\" />\n          <Typography variant=\"h5\" align=\"right\">\n            Welcome to my to do list react app!\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Typography className={classes.typography} variant=\"h2\">My todo list ({todos.length})</Typography>\n      {!openUpdateTodo ? (<form style={{ display: 'flex', justifyContent: 'center', padding: '20px 0px 20px 0px' }} onSubmit={handleOnclick}>\n        <TextField l\n          label=\"What do you want to do?\"\n          size=\"small\"\n          variant=\"filled\" type=\"text\"\n          onChange={handleOnchange}\n          value={todo}\n        />\n        <Button size=\"large\" onClick={handleOnclick} variant=\"contained\">Add to do</Button>\n      </form>) : (<form style={{ display: 'flex', justifyContent: 'center', padding: '20px 0px 20px 0px' }} onSubmit={updateSomething}>\n        <TextField type=\"text\" onChange={handleOnchangeUpdate} placeholder=\"what do you want to do?\" name=\"name\" value={input} />\n        <Button onClick={updateSomething} variant=\"contained\">update</Button>\n      </form>)}\n      <br />\n        <DataGrid\n          className={classes.table}\n          rows={rows}\n          columns={columns}\n          pageSize={5}\n          rowsPerPageOptions={[5]}\n          checkboxSelection\n          disableSelectionOnClick\n          onSelectionModelChange={(newSelectionModel) => {\n            setSelectionModel(newSelectionModel);\n          }}\n          selectionModel={selectionModel}\n          cell--textCenter\n        />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}